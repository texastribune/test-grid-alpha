@import "compass/utilities/general/clearfix"
@import "compass/css3/box-sizing"

// # The Grid

// User defined grid variables
$gridColumns: 12 !default
$gridGutterWidth: 15px !default
$gridLineColor: #AAA !default

// Derived variables
$gridColumnWidth: 100% / $gridColumns

// Box sizing hack
//
// Allows us to write much simpler css for the grid column spans.
//   <http://paulirish.com/2012/box-sizing-border-box-ftw/>
*
  +box-sizing(border-box)

// ## Grid Generation Helpers
//
// Derived from: <https://github.com/jlong/sass-twitter-bootstrap/blob/master/lib/_mixins.scss>
//

// main mixin to generate the basic grid
@mixin grid-core($gridColumnWidth, $gridGutterWidth)
  +grid-core-span-x($gridColumns, $gridColumnWidth, $gridGutterWidth)
  +grid-core-offset-x($gridColumns, $gridColumnWidth, $gridGutterWidth)

// mixin that generates .spanN
@mixin grid-core-span-x($gridColumns, $gridColumnWidth, $gridGutterWidth)
  @while $gridColumns > 0
    .span#{$gridColumns}
      +grid-core-span($gridColumns)
    $gridColumns: $gridColumns - 1

// mixin that generates .offsetN
@mixin grid-core-offset-x($gridColumns, $gridColumnWidth, $gridGutterWidth)
  @while $gridColumns > 0
    .offset#{$gridColumns}
      +grid-core-offset($gridColumns)
    $gridColumns: $gridColumns - 1

// The css that every column span should get except width.
@mixin grid-span-base()
  float: left
  min-height: 1px  // prevent collapsing columns
  // have to use padding because margin is outside the box-size calculation
  padding-left: $gridGutterWidth / 2
  padding-right: $gridGutterWidth / 2

// The css that every column spanN should get, just the width
@mixin grid-core-span($columns)
  width: ($gridColumnWidth * $columns)

// Shortcut mixin for getting column span style and width at once.
// Copies Bourbon Neat syntax.
@mixin span-columns($columns)
  +grid-span-base
  +grid-core-span($columns)

// Outer wrapper, center container
// Copies Bourbon Neat syntax.
@mixin outer-container
  +clearfix
  margin-left: auto
  margin-right: auto
  width: 960px + $gridGutterWidth  // TODO this is where the responsive magic should happen

// row container
// Copies Bourbon Neat syntax.
@mixin row
  +clearfix
  // To get an even reveal if we do lines, we have to divide whitespace symmetrically
  margin-left: -$gridGutterWidth / 2
  margin-right: -$gridGutterWidth / 2
  width: auto

// The css that every column offsetN should get.
@mixin grid-core-offset($columns)
  margin-left: ($gridColumnWidth * $columns)

// All grid columns need to be children of a `.row` block element.
// I could re-use outer-container here, but since outer and inner rows
// both need the clearfix mixin, take advantage of the repeated class name.
.row
  // +outer-container
  +clearfix
  margin-left: auto
  margin-right: auto
  width: 960px + $gridGutterWidth  // TODO this is where the responsive magic should happen

  .row
    // +row
    // To get an even reveal if we do lines, we have to divide whitespace symmetrically
    margin-left: -$gridGutterWidth / 2
    margin-right: -$gridGutterWidth / 2
    width: auto

// wrapper, goes outside the outer container and clips off the outside gutter. Optional.
// TODO if this becomes a thing, need to rename everything
.row-wrapper
  width: 960px
  margin-left: auto
  margin-right: auto
  overflow: hidden
  > .row
    margin-left: -7.5px
    margin-right: -7.5px

// The spanN class only gives width, you need .cell to get the other bits.
.cell
  +grid-span-base

// Generate base grid
+grid-core($gridColumnWidth, $gridGutterWidth)


// ## Lines
// If you need separators between grid elements.
// `box-sizing: { border-box; }` takes care of the change of width.
// These can be applied to the rows or the column spans.
// TODO: I really want to rename these. Guide? Rule?
.border-bottom
  border-bottom: 1px solid $gridLineColor

.border-right
  border-right: 1px solid $gridLineColor

.border-left
  border-left: 1px solid $gridLineColor

.border-top
  border-top: 1px solid $gridLineColor
